<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
/**
 * Top menu for store
 *
 * @see Mage_Catalog_Block_Navigation
 */
?>
<?php
/**
 * $this->renderCategoriesMenuHtml() supports optional arguments:
 * int Level number for list item class to start from
 * string Extra class of outermost list items
 * string If specified wraps children list in div with this class
 */
?>
<?php
    /* Modified version of _renderCategoryMenuItemHtml, oh yeah. */
//    function _renderCategoryMenuItemHtml2($category, $level = 0, $isLast = false, $isFirst = false,
//        $isOutermost = false, $outermostItemClass = '', $childrenWrapClass = '', $noEventAttributes = false)
//    {
//        if (!$category->getIsActive()) {
//            return '';
//        }
//        $html = array();
//
//        // get all children
//        if (Mage::helper('catalog/category_flat')->isEnabled()) {
//            $children = (array)$category->getChildrenNodes();
//            $childrenCount = count($children);
//        } else {
//            $children = $category->getChildren();
//            $childrenCount = $children->count();
//        }
//        $hasChildren = ($children && $childrenCount);
//
//        // select active children
//        $activeChildren = array();
//        foreach ($children as $child) {
//            if ($child->getIsActive()) {
//                $activeChildren[] = $child;
//            }
//        }
//        $activeChildrenCount = count($activeChildren);
//        $hasActiveChildren = ($activeChildrenCount > 0);
//
//        // prepare list item html classes
//        $classes = array();
//        $classes[] = 'level' . $level;
//        $classes[] = 'nav-' . $this->_getItemPosition($level);
//        if ($this->isCategoryActive($category)) {
//            $classes[] = 'active';
//        }
//        $linkClass = '';
//        if ($isOutermost && $outermostItemClass) {
//            $classes[] = $outermostItemClass;
//            $linkClass = ' class="'.$outermostItemClass.'"';
//        }
//        if ($isFirst) {
//            $classes[] = 'first';
//        }
//        if ($isLast) {
//            $classes[] = 'last';
//        }
//        if ($hasActiveChildren) {
//            $classes[] = 'parent';
//        }
//
//        // prepare list item attributes
//        $attributes = array();
//        if (count($classes) > 0) {
//            $attributes['class'] = implode(' ', $classes);
//        }
//
//        // assemble list item with attributes
//        $htmlLi = '<li';
//        foreach ($attributes as $attrName => $attrValue) {
//            $htmlLi .= ' ' . $attrName . '="' . str_replace('"', '\"', $attrValue) . '"';
//        }
//        $htmlLi .= '>';
//        $html[] = $htmlLi;
//
//        $html[] = '<a href="'.$this->getCategoryUrl($category).'"'.$linkClass.'>';
//        $html[] = '<span>' . $this->escapeHtml($category->getName()) . '</span>';
//        $html[] = '</a>';
//
//        // render children
//        $htmlChildren = '';
//        $j = 0;
//        foreach ($activeChildren as $child) {
//            $htmlChildren .= $this->_renderCategoryMenuItemHtml2(
//                $child,
//                ($level + 1),
//                ($j == $activeChildrenCount - 1),
//                ($j == 0),
//                false,
//                $outermostItemClass,
//                $childrenWrapClass,
//                $noEventAttributes
//            );
//            $j++;
//        }
//        if (!empty($htmlChildren)) {
//            if ($childrenWrapClass) {
//                $html[] = '<div class="' . $childrenWrapClass . '">';
//            }
//            $html[] = '<ul class="level' . $level . '">';
//            $html[] = $htmlChildren;
//            $html[] = '</ul>';
//            if ($childrenWrapClass) {
//                $html[] = '</div>';
//            }
//        }
//
//        $html[] = '</li>';
//
//        $html = implode("\n", $html);
//        return $html;
//    }
//    /* Modified version of renderCategoriesMenuHtml */
//    function renderCategoriesMenuHtml2($level = 0, $outermostItemClass = '', $childrenWrapClass = '')
//    {
//        $activeCategories = array();
//        foreach ($this->getStoreCategories() as $child) {
//            if ($child->getIsActive()) {
//                $activeCategories[] = $child;
//            }
//        }
//        $activeCategoriesCount = count($activeCategories);
//        $hasActiveCategoriesCount = ($activeCategoriesCount > 0);
//
//        if (!$hasActiveCategoriesCount) {
//            $html = '';
//        } else {
//            $html = '';
//            $j = 0;
//            foreach ($activeCategories as $category) {
//                $html .= $this->_renderCategoryMenuItemHtml(
//                    $category,
//                    $level,
//                    ($j == $activeCategoriesCount - 1),
//                    ($j == 0),
//                    true,
//                    $outermostItemClass,
//                    $childrenWrapClass,
//                    true
//                );
//                $j++;
//            }
//        }
//    }
    $categories = $this->getStoreCategories();
    $categoryName = "Select a category from below:";
    $keepDigging = true;
    $menuItems = '';
    while ($keepDigging) {
        $_count = is_array($categories)?count($categories):$categories->count();
        if ($_count == 0) {
            $keepDigging = false;
            break;
        }
        $nextLevel = false;
        foreach ($categories as $category) {
            if ($category->getIsActive() && $this->isCategoryActive($category)) {
                $categoryName = $category->getName() . ' - Select a subcategory';
                // get all children
                if (Mage::helper('catalog/category_flat')->isEnabled()) {
                    $children = (array)$category->getChildrenNodes();
                    $childrenCount = count($children);
                } else {
                    $children = $category->getChildren();
                    $childrenCount = $children->count();
                }
                $hasChildren = ($children && $childrenCount);

                // select active children
                $hasActiveChildren = false;
                foreach ($children as $child) {
                    if ($child->getIsActive()) {
                        $hasActiveChildren = true;
                        if (Mage::helper('catalog/category_flat')->isEnabled()) {
                            $nextLevel = (array)$category->getChildrenNodes();
                        } else {
                            $nextLevel = $category->getChildren();
                        }
                        break;
                    }
                }

                if ($hasActiveChildren) {
                    break;
                }
            }
        }
        if ($nextLevel) {
            $categories = $nextLevel;
            continue;
        }

        $currentCategoryName = Mage::registry('current_category');
        if ($currentCategoryName) $currentCategoryName = $currentCategoryName->getName();
        else $currentCategoryName = 'nonecat';
        
        // no active selected children, so lets render this
        $keepDigging = false;
        $activeChildren = array();
        foreach ($categories as $category) {
            if ($category->getIsActive()) {
                $html = array();
                // assemble list item with attributes
                $html[] = '<li>';
                if ($category->getName() != $currentCategoryName) {
                    $html[] = '<a href="'.$this->getCategoryUrl($category).'">';
                } else {
                    $html[] = '<a href="#">';
                }
                $html[] = '<span>' . $this->escapeHtml($category->getName()) . '</span>';
                $html[] = '</a>';
                $html[] = '</li>';

                $menuItems .= implode("\n", $html);
            }
        }
    }
?>
<?php if($menuItems): ?>
<div class="nav-container">
    <ul id="nav" data-role="listview" data-inset="true">
        <li data-role="list-divider"><?php echo $categoryName; ?></li>
        <?php echo $menuItems ?>
    </ul>
</div>
<?php endif ?>
